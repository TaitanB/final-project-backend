{
  "openapi": "3.0.1",
  "info": {
    "title": "Your Pet App",
    "description": "This is the Swagger documentation for interacting with our application's API.",
    "contact": {
      "name": "Your Pet App",
      "url": "https://khailoandrey.github.io/final-project-frontend/"
    },
    "version": "1.0.1"
  },
  "externalDocs": {
    "description": "API for Your Pet application",
    "url": "https://github.com/TaitanB/final-project-backend"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://final-project-backend-4o0r.onrender.com/api" },
    { "url": "http://localhost:3001/api" }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices endpoints"
    },
    {
      "name": "Pets",
      "description": "Pets endpoints"
    },
    {
      "name": "Friends",
      "description": "Friends endpoints"
    },
    {
      "name": "News",
      "description": "News endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "New user registration",
        "produces": ["application/json"],
        "requestBody": {
          "description": "The request body user registration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user is registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The JWT access token"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "409": {
            "description": "Email in use",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User log in",
        "produces": ["application/json"],
        "requestBody": {
          "description": "The request body user log in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The JWT access token"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "401": {
            "description": "The email or password is incorrect",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "Successful user logout",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "put": {
        "tags": ["Users"],
        "summary": "Update user data",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "description": "Request to update user data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UpdateUserResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get data current user",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Current user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },

    "/notices": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get all notices",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Limit of items per page"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query for notices"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": ["sell", "lost-found", "for-free"]
            },
            "description": "Filter notices by category"
          },
          {
            "in": "query",
            "name": "sex",
            "schema": {
              "type": "string",
              "enum": ["male", "female"]
            },
            "description": "Filter notices by pet's sex"
          },
          {
            "in": "query",
            "name": "age",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["0-12m", "1-2y", ">2y"]
              }
            },
            "description": "Filter notices by pet's age"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "string",
                      "description": "1"
                    },
                    "perPage": {
                      "type": "string",
                      "description": "12"
                    },
                    "totalPages": {
                      "type": "string",
                      "description": "452"
                    },
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticeResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/notices/owner": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notices for owner",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Limit of items per page"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query for notices"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": ["sell", "lost-found", "for-free"]
            },
            "description": "Filter notices by category"
          },
          {
            "in": "query",
            "name": "sex",
            "schema": {
              "type": "string",
              "enum": ["male", "female"]
            },
            "description": "Filter notices by pet's sex"
          },
          {
            "in": "query",
            "name": "age",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["0-12m", "1-2y", ">2y"]
              }
            },
            "description": "Filter notices by pet's age"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "string",
                      "description": "1"
                    },
                    "perPage": {
                      "type": "string",
                      "description": "12"
                    },
                    "totalPages": {
                      "type": "string",
                      "description": "52"
                    },
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticeResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["Notices"],
        "summary": "Add new notice",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "description": "Notice data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NoticeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notice added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/notices/{id}": {
      "delete": {
        "tags": ["Notices"],
        "summary": "Delete a notices by id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Notice's id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Notice deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Notice not found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": ["Notices"],
        "summary": "Get a notices by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Notice's id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticeOne"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Notice not found",
            "content": {}
          }
        }
      }
    },
    "/notices/favorite/add/{id}": {
      "patch": {
        "tags": ["Notices"],
        "summary": "Add notice to favorite",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Notice's id"
          }
        ],
        "responses": {
          "200": {
            "description": "Notice add to favorite successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorites"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Notice not found",
            "content": {}
          }
        }
      }
    },
    "/notices/favorite/delete/{id}": {
      "patch": {
        "tags": ["Notices"],
        "summary": "Delete notice to favorite",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Notice's id"
          }
        ],
        "responses": {
          "200": {
            "description": "Notice deleted from favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Notice not found",
            "content": {}
          }
        }
      }
    },
    "/notices/favorite": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get favorites notices",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Limit of items per page"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query for notices"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": ["sell", "lost-found", "for-free"]
            },
            "description": "Filter notices by category"
          },
          {
            "in": "query",
            "name": "sex",
            "schema": {
              "type": "string",
              "enum": ["male", "female"]
            },
            "description": "Filter notices by pet's sex"
          },
          {
            "in": "query",
            "name": "age",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["0-12m", "1-2y", ">2y"]
              }
            },
            "description": "Filter notices by pet's age"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "string",
                      "description": "1"
                    },
                    "perPage": {
                      "type": "string",
                      "description": "12"
                    },
                    "totalPages": {
                      "type": "string",
                      "description": "18"
                    },
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticeResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },

    "/users/pets": {
      "patch": {
        "tags": ["Pets"],
        "summary": "Add new pet",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "description": "Pet data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pet added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/users/pets/{id}": {
      "patch": {
        "tags": ["Pets"],
        "summary": "Delete a pet by id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Pet's id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pet deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        }
      }
    },

    "/sponsors": {
      "get": {
        "tags": ["Friends"],
        "summary": "Get friends",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sponsors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Friend"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["News"],
        "summary": "Get news",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Limit of items per page"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query for notices"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "string",
                      "description": "1"
                    },
                    "perPage": {
                      "type": "string",
                      "description": "6"
                    },
                    "totalPages": {
                      "type": "string",
                      "description": "192"
                    },
                    "articles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Article"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User name",
            "minLength": 2,
            "maxLength": 16,
            "example": "Qwerty"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email",
            "example": "qwerty@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*d)",
            "example": "Qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email",
            "example": "qwerty@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*d)",
            "example": "Qwerty123"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User id",
            "example": "nfuwjhretyhbvcbuiwrhty"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "Mango"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "mango@mail.com"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "21-08-2010",
            "default": ""
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380671234567",
            "default": ""
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv",
            "default": ""
          },
          "avatarURL": {
            "type": "string",
            "description": "User photo url",
            "example": "https://example.com/avatar.jpg"
          },
          "pets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User's pet name",
                  "example": "Caty"
                },
                "date": {
                  "type": "string",
                  "description": "User's pet birthday",
                  "example": "29-08-2020"
                },
                "type": {
                  "type": "string",
                  "description": "User's pet type",
                  "example": "Cat"
                },
                "file": {
                  "type": "string",
                  "description": "User's pet photo url",
                  "example": "https://example.com/pet.jpg"
                },
                "comments": {
                  "type": "string",
                  "description": "User's comments"
                },
                "_id": {
                  "type": "string",
                  "description": "User's pet id",
                  "example": "32143dshtuv2dfyuijhgf45474"
                }
              }
            }
          },
          "favorite": {
            "type": "array",
            "items": {
              "type": "string",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's favorite notice id",
                  "example": "32143dshtuv2dfyuijhgf45474"
                }
              }
            }
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name",
            "minLength": 2,
            "maxLength": 16,
            "example": "Mango"
          },
          "avatar": {
            "type": "string",
            "description": "User photo",
            "format": "binary"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday. Please use DD-MM-YYYY",
            "pattern": "^\\d{2}-\\d{2}-\\d{4}$",
            "example": "21-08-2010",
            "default": ""
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "pattern": "^+380d{9}$",
            "example": "+380671234567",
            "default": ""
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv",
            "default": ""
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User id",
            "example": "1259385yjvdsa95kf865098"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "Mango"
          },
          "avatarURL": {
            "type": "string",
            "description": "User photo url",
            "example": "https://example.com/avatar.jpg"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "21-08-2010",
            "default": ""
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380671234567",
            "default": ""
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv",
            "default": ""
          }
        }
      },

      "NoticeRequest": {
        "type": "object",
        "required": [
          "title",
          "category",
          "name",
          "date",
          "type",
          "notice",
          "sex",
          "location"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the notice",
            "minLength": 4,
            "maxLength": 30,
            "example": "Lost Cat in Central Park"
          },
          "category": {
            "type": "string",
            "description": "The category of the notice",
            "enum": ["sell", "lost-found", "for-free"],
            "example": "lost-found"
          },
          "name": {
            "type": "string",
            "description": "User's pet name",
            "minLength": 2,
            "maxLength": 16,
            "example": "Caty"
          },
          "date": {
            "type": "string",
            "description": "User's pet birthday. Please use DD-MM-YYYY.",
            "pattern": "^\\d{2}-\\d{2}-\\d{4}$",
            "example": "29-08-2020"
          },
          "type": {
            "type": "string",
            "description": "User's pet type",
            "minLength": 2,
            "maxLength": 16,
            "example": "Cat"
          },
          "notice": {
            "type": "string",
            "format": "binary",
            "description": "User's pet photo"
          },
          "sex": {
            "type": "string",
            "description": "The pet's sex",
            "enum": ["male", "female"],
            "example": "male"
          },
          "location": {
            "type": "string",
            "description": "The pet's location",
            "example": "Kyiv"
          },
          "price": {
            "type": "number",
            "description": "Pet's price. Required if category is sell",
            "minimum": 0.01,
            "example": 100
          },
          "comments": {
            "type": "string",
            "description": "User's comments",
            "maxLength": 120
          }
        }
      },
      "NoticeResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Notice id",
            "example": "1h23u45iumyhigjfsaitfyg"
          },
          "title": {
            "type": "string",
            "description": "The title of the notice",
            "example": "Lost Cat in Central Park"
          },
          "category": {
            "type": "string",
            "description": "The category of the notice",
            "example": "lost-found"
          },
          "date": {
            "type": "string",
            "description": "User's pet birthday",
            "example": "29-08-2020"
          },
          "file": {
            "type": "string",
            "description": "User's pet photo url",
            "example": "https://example.com/pet.jpg"
          },
          "sex": {
            "type": "string",
            "description": "The pet's sex",
            "example": "male"
          },
          "location": {
            "type": "string",
            "description": "The pet's location",
            "example": "Kyiv"
          },
          "owner": {
            "type": "string",
            "description": "The id of the user who owns the notice",
            "example": "64bd86de7f96cefd06432c5d"
          },
          "createdAt": {
            "type": "Date",
            "description": "Notice creation date",
            "example": "2023-07-23T20:00:30.149+00:00"
          }
        }
      },
      "NoticeOne": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Notice id",
            "example": "1h23u45iumyhigjfsaitfyg"
          },
          "title": {
            "type": "string",
            "description": "The title of the notice",
            "example": "Lost Cat in Central Park"
          },
          "category": {
            "type": "string",
            "description": "The category of the notice",
            "example": "lost-found"
          },
          "name": {
            "type": "string",
            "description": "User's pet name",
            "example": "Caty"
          },
          "date": {
            "type": "string",
            "description": "User's pet birthday",
            "example": "29-08-2020"
          },
          "type": {
            "type": "string",
            "description": "User's pet type",
            "example": "Cat"
          },
          "file": {
            "type": "string",
            "description": "User's pet photo url",
            "example": "https://example.com/pet.jpg"
          },
          "sex": {
            "type": "string",
            "description": "The pet's sex",
            "example": "male"
          },
          "location": {
            "type": "string",
            "description": "The pet's location",
            "example": "Kyiv"
          },
          "price": {
            "type": "number",
            "description": "Pet's price. Required if category is sell",
            "example": 100
          },
          "comments": {
            "type": "string",
            "description": "User's comments"
          },
          "owner": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User id",
                "example": "nfuwjhretyhbvcbuiwrhty"
              },
              "name": {
                "type": "string",
                "description": "User name",
                "example": "Mango"
              },
              "email": {
                "type": "string",
                "description": "User email",
                "example": "mango@mail.com"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380671234567",
                "default": ""
              }
            }
          },
          "createdAt": {
            "type": "Date",
            "description": "Notice creation date",
            "example": "2023-07-23T20:00:30.149+00:00"
          }
        }
      },
      "Favorites": {
        "type": "array",
        "items": {
          "type": "string",
          "properties": {
            "_id": {
              "type": "string",
              "description": "User's favorite notice id",
              "example": "32143dshtuv2dfyuijhgf45474"
            }
          }
        }
      },

      "PetRequest": {
        "type": "object",
        "required": ["name", "date", "type", "pet"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's pet name",
            "minLength": 2,
            "maxLength": 16,
            "example": "Caty"
          },
          "date": {
            "type": "string",
            "description": "User's pet birthday. Please use DD-MM-YYYY.",
            "pattern": "^\\d{2}-\\d{2}-\\d{4}$",
            "example": "29-08-2020"
          },
          "type": {
            "type": "string",
            "description": "User's pet type",
            "minLength": 2,
            "maxLength": 16,
            "example": "Cat"
          },
          "pet": {
            "type": "string",
            "format": "binary",
            "description": "User's pet photo"
          },
          "comments": {
            "type": "string",
            "description": "User's comments",
            "maxLength": 120
          }
        }
      },
      "PetResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's pet name",
            "example": "Caty"
          },
          "date": {
            "type": "string",
            "description": "User's pet birthday",
            "example": "29-08-2020"
          },
          "type": {
            "type": "string",
            "description": "User's pet type",
            "example": "Cat"
          },
          "file": {
            "type": "string",
            "description": "User's pet photo url",
            "example": "https://example.com/pet.jpg"
          },
          "comments": {
            "type": "string",
            "description": "User's comments"
          },
          "owner": {
            "type": "string",
            "description": "The id of the user who owns the notice",
            "example": "64bd86de7f96cefd06432c5d"
          },
          "createdAt": {
            "type": "Date",
            "description": "Notice creation date",
            "example": "2023-07-23T20:00:30.149+00:00"
          }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Notification of successful deletion"
          },
          "deletedNoticeId": {
            "type": "string",
            "description": "Id of the deleted object"
          }
        }
      },

      "Article": {
        "type": "object",
        "properties": {
          "imgUrl": {
            "type": "string",
            "format": "uri"
          },
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "type": "string"
          }
        }
      },

      "Friend": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "addressUrl": {
            "type": "string",
            "format": "uri"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri"
          },
          "address": {
            "type": "string"
          },
          "workDays": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "isOpen": {
                  "type": "boolean"
                },
                "from": {
                  "type": "string",
                  "format": "time"
                },
                "to": {
                  "type": "string",
                  "format": "time"
                }
              }
            }
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
